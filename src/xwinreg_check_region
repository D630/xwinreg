#!/usr/bin/env bash

__check_region()
{
    __src_script check_gravity decrease_win_xid

    declare \
            i= \
            region_number= \
            win_number_maximum= \
            layout_action= \
            entity_region= \
            gravity= \
            win_region_number=
    declare -a \
            region_geo=() \
            reg_geo=()

    for ((i=1 ; i <= $reg_number ; i++))
    do
        region_number=$i
        win_number_maximum=${layout[${i}:win_number_maximum]}
        layout_action=__${layout[${i}:layout_action]}
        entity_region=${layout[${i}:entity_region]}
        gravity=${layout[${i}:gravity]}

        case $entity_region in
            alias)
                    eval region_geo=('${region_'${layout[${i}:region_geo]}'[@]}')
                    layout[${i}:region_geo]=${region_geo[0]},${region_geo[1]},${region_geo[2]},${region_geo[3]}
                    printf '%s\n' "layout[${i}:region_geo]=${region_geo[0]},${region_geo[1]},${region_geo[2]},${region_geo[3]} " >> "$file_tmp"
                    ;;
            px)
                    region_geo=(${layout[${i}:region_geo]//,/ })
                    ;;
            pro)
                    region_geo=(${layout[${i}:region_geo]//,/ })
                    region_geo[0]=$((w*${region_geo[0]}/100))
                    region_geo[1]=$((h*${region_geo[1]}/100))
                    region_geo[2]=$((w*${region_geo[2]}/100))
                    region_geo[3]=$((h*${region_geo[3]}/100))
                    ;;
        esac

        gravity=$(__check_gravity "$gravity")

        if [[ $win_number_maximum == max ]]
        then
            win_region_number=$win_number
        else
            win_region_number=$win_number_maximum
        fi

        # Now process layout by calling specified function.
        __src_script "${layout_action#__*}" do_wmctrl store_region
        ${layout_action} "${region_geo[0]}" "${region_geo[1]}" "${region_geo[2]}" "${region_geo[3]}"
        # After layouting we redeclare win_xid.
        __decrease_win_xid

        reg_geo+=(${layout[${i}:region_geo]})
    done

    # Write reg_geo to file_tmp.
    printf '%s\n' "reg_geo=(${reg_geo[*]})" >> "$file_tmp"
    unset -v reg_geo

    for ((i=1 ; i <= $reg_number ; i++))
    do
        eval win_xid_region_tmp=('${win_xid_region_'${i}'[@]}')
        eval win_geo_x_y_region_tmp=('${win_geo_x_y_region_'${i}'[@]}')
        eval win_geo_w_h_region_tmp=('${win_geo_w_h_region_'${i}'[@]}')

        # In the end we write some arrays to file_tmp.
        printf '%s\n' "win_xid_region_${i}=(${win_xid_region_tmp[*]})
win_geo_x_y_region_${i}=(${win_geo_x_y_region_tmp[*]})
win_geo_w_h_region_${i}=(${win_geo_w_h_region_tmp[*]})" >> "$file_tmp"
    done
}
