#!/usr/bin/env bash

__cycle_window()
{

    __src_script check_file_tmp mktmp clock anticlock order_reverse_array

    __check_file_tmp < <(grep -v -e "win_xid_region_" -e "win_geo_x_y_region_" -e "win_geo_w_h_region_" "$file_tmp")

    case $region_selection in
        all)
                win_xid_selection=(${win_xid[@]})
                ;;
        active)
                exit 1
                #win_active="$(xprop -root -notype __NET_ACTIVE_WINDOW | awk '{print $NF}')"
                #region_active="$(sed -n "/win_xid_region_/ s/win_xid_region_\(.*\)=(.*"${win_active:2}".*)/\1/ p" "$file_tmp")"
                #eval win_xid_selection=( '${win_xid_region_'${region_active}'[@]}' )
                ;;
        *)
                exit 1
                #if [[ "$region_selection" =~ (-|,|[[:digit:]]) ]]
                #then
                #    for region_number in $(__parse_region "$region_selection" | tr ' ' '\n' | sort -n | tr '\n' ' ')
                #    do
                #        eval win_xid_region_tmp=( '${win_xid_region_'${region_number}'[@]}' )
                #        win_xid_selection+=( "${win_xid_region_tmp[@]}" )
                #    done
                #fi
                ;;
    esac

    win_num=${#win_xid_selection[@]}

    case $direction_cycle in
        clock)
                __cycle() { __clock "$@" ; }
                ;;
        anticlock)
                __cycle() { __anticlock "$@" ; }
                ;;
        reverse)
                __cycle() { __order_reverse_array "$@" ; }
                ;;
    esac

    mapfile -t win_xid < <(__cycle "${win_xid_selection[@]}")
    unset -v reg_geo

     # Now we rewrite the hole Tmp File.
    __mktmp
}
