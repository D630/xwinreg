#!/usr/bin/env bash

# Copyright 2014 D630
# https://github.com/D630/xwinreg

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.

# You should have received a copy of the GNU General
# Public License along with this program. If not, see
# <http://www.gnu.org/licenses/gpl-3.0.html>.

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

declare vars_base=$(set -o posix ; set)

# -- FUNCTIONS.

__xwr_xwinreg_id_version() { echo "0.1.0.3" ; }

__xwr_xwinreg_id_usage()
{
    printf '%s\n' 'xwinreg-id [-T] (-h|-I|-v)'
}

__xwr_xwinreg_id_help()
{
    printf "$(__xwr_xwinreg_id_usage)

OPTIONS
-------
    OPT             ARG
    ---             ---
    -h
    -I              <FILE> or hyphen (-)
    -T              <FILE>
    -v

ARGUMENTS
---------
    <FILE>          Regular file or named pipe.
"
}

__xwr_xwinreg_id_check_variables_input()
{
    if [[ $1 =~ ^(win_number|win_xid|win_geo_x_y|win_geo_w_h)=.*$ ]]
    then
        eval "$1"
    else
        { echo "Irregular variable inside input." >&2 ; return 1 ; }
    fi
}

__xwr_xwinreg_id_check_args()
{
    declare o=
    if [[ ! $OPTARG =~ -.+ ]]
    then
        for o
        do
            declare -g "$o"
        done
    else
        { printf '%s\n' "Option -${opt} requires an argument." >&2 ; exit 1 ; }
    fi
}

# -- MAIN.

declare \
        file_input= \
        file_tmp= \
        opt= \
        win_number=

declare -a \
           win_xid=() \
           win_geo_x_y=() \
           win_geo_w_h=()

while getopts :hI:T:v opt
do
    case $opt in
        h)
                __xwr_xwinreg_id_help
                exit 0
                ;;
        I)
                if [[ ! $OPTARG =~ -.+ ]]
                then
                    XWINREG_INPUT_FILE=$OPTARG
                else
                    { printf '%s\n' "Option -${opt} requires an argument." >&2 ; exit 1 ; }
                fi
                ;;
        T)
                __xwr_xwinreg_id_check_args "XWINREG_TMP_FILE=$OPTARG"
                ;;
        v)
                __xwr_xwinreg_id_version
                exit 0
                ;;
        \?)
                { printf '%s\n' "Unknown option: -${OPTARG}." >&2 ; exit 1 ; }
                ;;
        \:)
                { printf '%s\n' "Option -${OPTARG} requires an argument." >&2 ; exit 1 ; }
                ;;
    esac
done

if [[ $XWINREG_INPUT_FILE ]]
then
    file_input=$XWINREG_INPUT_FILE

    if [[ $XWINREG_INPUT_FILE == - ]]
    then
        if [[ -p /dev/stdin ]]
        then
            while read -r
            do
                __xwr_xwinreg_id_check_variables_input "$REPLY"
            done
        else
            { echo "Stdin is not coming from a pipe." >&2 ; exit 1 ; }
        fi
    else
        if [[ -p $XWINREG_INPUT_FILE || -f $XWINREG_INPUT_FILE ]]
        then
            while read -r
            do
                __xwr_xwinreg_id_check_variables_input "$REPLY"
            done < "$XWINREG_INPUT_FILE"
        else
            { echo "File does not exist or is neather a regular file nor a named pipe." >&2 ; exit 1 ; }
        fi
    fi
else
    { echo "Input file is not set." >&2 ; exit 1 ; }
fi

if [[ $XWINREG_TMP_FILE ]]
then
    file_tmp=$XWINREG_TMP_FILE
else
    file_tmp=${TMPDIR:-/tmp}/xwinreg_default.tmp
fi

unset -v opt

fgrep -v -e "$vars_base" < <(set -o posix ; set) |
egrep -v -e "^BASH_REMATCH=" \
         -e "^OPTIND=" \
         -e "^REPLY=" \
         -e "^BASH_LINENO=" \
         -e "^BASH_SOURCE=" \
         -e "^FUNCNAME=" \
         > "$file_tmp"

exit 0
