#!/usr/bin/env bash

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

#declare vars_base=$(set -o posix ; set)

# -- FUNCTIONS.

__xwr_xwinreg_focus_version() { echo "0.1.0.0" ; }

__xwr_xwinreg_focus_usage()
{
    printf '%s\n' 'xwinreg-focus [-T] (-h|-r|-v)'
}

__xwr_xwinreg_focus_help()
{
    printf "$(__xwr_xwinreg_focus_usage)

OPTIONS
-------
    OPT             ARG
    ---             ---
    -h
    -r              <REG>
    -T              <FILE>
    -v

ARGUMENTS
---------
    <FILE>          Regular file or named pipe.
    <REG>           Up to this sample: '1', '1,3', '1-3' or '1,2-3'.
                    Additional: 'active' or 'all'.
"
}

__xwr_xwinreg_focus_check_focusing()
{
    declare \
            file_tmp=$1 \
            i= \
            j= \
            region_selection=$2 \
            reg_number= \
            win_active=

    declare -a \
               reg_index=() \
               win_xid_selection=()

    declare -A win_regions

    while read -r
    do
        eval "$REPLY"
    done < <(egrep -e "^reg_number=.*" \
                    -e "^win_regions\[.*\]=.*" "$file_tmp")

    reg_index=($(eval "printf '%s\n' {1..${reg_number}}"))
    read -r _ _ _ _ win_active < <(xprop -root -notype _NET_ACTIVE_WINDOW)

    case $region_selection in
        all)
                for i in "${reg_index[@]}"
                do
                    win_xid_selection+=(${win_regions[${i}:win_xids]})
                done
                ;;
        active)
                for i in "${reg_index[@]}"
                do
                    [[ ${win_regions[${i}:win_xids]} =~ $win_active ]] && { win_xid_selection=(${win_regions[${i}:win_xids]}) ; }
                done
                ;;
        *)
                for i in $(__xwr_xwinreg_focus_order_num_asc_array $(__xwr_xwinreg_focus_parse_region "$region_selection"))
                do
                    win_xid_selection+=(${win_regions[${i}:win_xids]})
                done
                ;;
    esac

    for j in "${win_xid_selection[@]}"
    do
        wmctrl -i -a "$j"
    done

    wmctrl -i -a "$win_active"

    #~ unset -v \
         #~ reg_index \
         #~ win_xid_selection \
         #~ i \
         #~ j \
         #~ region_selection
}

__xwr_xwinreg_focus_order_num_asc_array()
{
    declare -a array=($@)
    declare i= j= element=
    for ((i=1 ; i < ${#array[@]} ; ++i))
    do
        for ((j=i ; j > 0 ; --j))
        do
            element=${array[j]}
            ((${element%%,*} < ${array[j-1]%%,*})) && { array[j]=${array[j-1]} ; array[j-1]=$element ; }
        done
    done
    printf '%s\n' "${array[@]}"
}

__xwr_xwinreg_focus_parse_region()
{
    declare -a args=()
    declare i= reg=$1
    for i in ${reg//,/ }
    do
        { [[ $i =~ - ]] && args+=(\{${i/-/..}\}) ; } || args+=($i)
    done
    eval "printf '%s\n' "${args[@]}""
}

__xwr_xwinreg_focus_check_args()
{
    declare o
    if [[ ! $OPTARG = -* ]]
    then
        for o
        do
            declare -g "$o"
        done
    else
        { echo "Option -${opt} requires an argument." >&2 ; exit 1 ; }
    fi
}

# -- MAIN.

declare \
        file_tmp= \
        opt= \
        region_selection=

while getopts :hr:T:v opt
do
    case $opt in
        h)
                __xwr_xwinreg_focus_help
                exit 0
                ;;
        r)
                __xwr_xwinreg_focus_check_args "region_selection=$OPTARG"
                ;;
        T)
                __xwr_xwinreg_focus_check_args "XWINREG_TMP_FILE=$OPTARG"
                ;;
        v)
                __xwr_xwinreg_focus_version
                exit 0
                ;;
        \?)
                { printf '%s\n' "Unknown option: -${OPTARG}." >&2 ; exit 1 ; }
                ;;
        \:)
                { printf '%s\n' "Option -${OPTARG} requires an argument." >&2 ; exit 1 ; }
                ;;
    esac
done

if [[ $XWINREG_TMP_FILE ]]
then
    file_tmp=$XWINREG_TMP_FILE
else
    file_tmp=${TMPDIR:-/tmp}/xwinreg_default.tmp
fi

[[ ! $region_selection ]] && { echo "No region specified." >&2 ; exit 1 ; }

__xwr_xwinreg_focus_check_focusing "$file_tmp" "$region_selection"

#~ unset -v \
        #~ file_tmp= \
        #~ region_selection= \
        #~ opt=

exit 0
