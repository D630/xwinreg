#!/usr/bin/env bash

# Copyright 2014 D630
# https://github.com/D630/xwinreg

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.

# You should have received a copy of the GNU General
# Public License along with this program. If not, see
# <http://www.gnu.org/licenses/gpl-3.0.html>.

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

#declare vars_base=$(set -o posix ; set)
shopt -s extglob

# -- FUNCTIONS.

__xwr_xwinreg_move_to_desk_version() { echo "0.1.0.2" ; }

__xwr_xwinreg_move_to_desk_usage()
{
    printf '%s\n' 'xwinreg-move-to-desk [-T] (-h|-r|-v) -D [-W]'
}

__xwr_xwinreg_move_to_desk_help()
{
    printf "$(__xwr_xwinreg_move_to_desk_usage)

OPTIONS
-------
    OPT             ARG
    ---             ---
    -D              <DESK>
    -h
    -r              <REG>
    -T              <FILE>
    -v
    -W

ARGUMENTS
---------
    <DESK>          'curr' or relative to the current desktop 'next' or
                    'preview'. To specify a desktop number (starts at 0)
                    use the prefix 'i:'; a desktop name is prefixed with
                    's:'. Examples: 'i:1'; 's:web'; '\"s:some stuff\"'.
    <FILE>          Regular file or named pipe.
    <REG>           Up to this sample: '1', '1,3', '1-3' or '1,2-3'.
                    Additional: 'active' or 'all'.
"
}

__xwr_xwinreg_move_to_desk_check_move_to_desk()
{
    declare \
            desk_curr= \
            desk_number= \
            desk_target=$3 \
            file_tmp=$1 \
            i= \
            j= \
            k= \
            region_selection=$2 \
            reg_number= \
            switch_to_desk_target=$4 \
            win_active=

    declare -a \
               desk_names=() \
               desk_numbers=() \
               reg_index=() \
               win_xid_selection=()

    declare -A win_regions

    while read -r
    do
        eval "$REPLY"
    done < <(egrep -e "^reg_number=.*" \
                   -e "^win_regions\[.*\]=.*" "$file_tmp")

    reg_index=($(eval "printf '%s\n' {1..${reg_number}}"))
    read -r _ _ _ _ win_active < <(xprop -root -notype _NET_ACTIVE_WINDOW)
    read -r _ _ desk_curr < <(xprop -root -notype _NET_CURRENT_DESKTOP)
    read -r _ _ desk_number < <(xprop -root -notype _NET_NUMBER_OF_DESKTOPS)

    for ((i=0 ; i <= $desk_number-1 ; i++))
    do
        desk_numbers+=($i)
    done

    case $region_selection in
        all)
                for i in "${reg_index[@]}"
                do
                    win_xid_selection+=(${win_regions[${i}:win_xids]})
                done
                ;;
        active)
                for i in "${reg_index[@]}"
                do
                    [[ ${win_regions[${i}:win_xids]} =~ $win_active ]] && { win_xid_selection=(${win_regions[${i}:win_xids]}) ; }
                done
                ;;
        *)
                for i in $(__xwr_xwinreg_move_to_desk_order_num_asc_array $(__xwr_xwinreg_move_to_desk_parse_region "$region_selection"))
                do
                    win_xid_selection+=(${win_regions[${i}:win_xids]})
                done
                ;;
    esac

    case $desk_target in
        curr)
                desk_target=$desk_curr
                ;;
        next)
                desk_target=${desk_numbers[${desk_curr}+1]:-${desk_numbers[0]}}
                ;;
        preview)
                desk_target=${desk_numbers[${desk_curr}-1]:-${desk_numbers[-1]}}
                ;;
        i:+([0-9]))
                desk_target=${desk_target#*:}
                ;;
        s:!([0-9]))
                read -r -a desk_names < <(xprop -root -notype _NET_DESKTOP_NAMES)
                desk_names=(${desk_names[@]:2})
                desk_names=(${desk_names[@]//\",/\"})
                for j in "${!desk_names[@]}"
                do
                    [[ ${desk_names[$j]} == \"${desk_target#*:}\" ]] && desk_target=${desk_numbers[$j]}
                done
                ;;
    esac

    for k in "${win_xid_selection[@]}"
    do
        wmctrl -i -r "$k" -t "$desk_target"
    done

    [[ $switch_to_desk_target == switch_to_desk_target ]] && wmctrl -i -a "${win_xid_selection[0]}"

    #~ unset -v \
         #~ reg_index \
         #~ win_xid_selection \
         #~ i \
         #~ j \
         #~ k \
         #~ region_selection \
         #~ switch_to_desk_target \
         #~ desk_target \
         #~ desk_curr \
         #~ desk_number \
         #~ desk_numbers \
         #~ desk_names
}

__xwr_xwinreg_move_to_desk_order_num_asc_array()
{
    declare -a array=($@)
    declare i= j= element=
    for ((i=1 ; i < ${#array[@]} ; ++i))
    do
        for ((j=i ; j > 0 ; --j))
        do
            element=${array[j]}
            ((${element%%,*} < ${array[j-1]%%,*})) && { array[j]=${array[j-1]} ; array[j-1]=$element ; }
        done
    done
    printf '%s\n' "${array[@]}"
}

__xwr_xwinreg_move_to_desk_parse_region()
{
    declare -a args=()
    declare i= reg=$1
    for i in ${reg//,/ }
    do
        { [[ $i =~ - ]] && args+=(\{${i/-/..}\}) ; } || args+=($i)
    done
    eval "printf '%s\n' "${args[@]}""
}

__xwr_xwinreg_move_to_desk_check_args()
{
    declare o
    if [[ ! $OPTARG = -* ]]
    then
        for o
        do
            declare -g "$o"
        done
    else
        { printf '%s\n' "Option -${opt} requires an argument." >&2 ; exit 1 ; }
    fi
}

# -- MAIN.

declare \
        desk_target= \
        file_tmp= \
        opt= \
        region_selection= \
        switch_to_desk_target=

while getopts :D:hr:T:vW opt
do
    case $opt in
        D)
                __xwr_xwinreg_move_to_desk_check_args "desk_target=$OPTARG"
                ;;
        h)
                __xwr_xwinreg_move_to_desk_help
                exit 0
                ;;
        r)
                __xwr_xwinreg_move_to_desk_check_args "region_selection=$OPTARG"
                ;;
        T)
                __xwr_xwinreg_move_to_desk_check_args "XWINREG_TMP_FILE=$OPTARG"
                ;;
        v)
                __xwr_xwinreg_move_to_desk_version
                exit 0
                ;;
        W)
                switch_to_desk_target=switch_to_desk_target
                ;;
        \?)
                { printf '%s\n' "Unknown option: -${OPTARG}." >&2 ; exit 1 ; }
                ;;
        \:)
                { printf '%s\n' "Option -${OPTARG} requires an argument." >&2 ; exit 1 ; }
                ;;
    esac
done

if [[ $XWINREG_TMP_FILE ]]
then
    file_tmp=$XWINREG_TMP_FILE
else
    file_tmp=${TMPDIR:-/tmp}/xwinreg_default.tmp
fi

[[ ! $region_selection ]] && { echo "No region specified." >&2 ; exit 1 ; }
[[ ! $desk_target ]] && { echo "No target desk specified." >&2 ; exit 1 ; }

__xwr_xwinreg_move_to_desk_check_move_to_desk "$file_tmp" "$region_selection" "$desk_target" "$switch_to_desk_target"

#~ unset -v \
         #~ file_tmp= \
         #~ region_selection= \
         #~ desk_target= \
         #~ switch_to_desk_target= \
         #~ opt=

exit 0
