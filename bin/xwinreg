#!/usr/bin/env bash

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

declare \
        vars_base=$(set -o posix ; set) \
        src_dir=~/code/source/xwinreg/bin

# -- Functions.

__version() { echo "0.1.7.0" ; }

__usage()
{
    printf 'xwinreg
        [-I]
        [-C|-T|-n|-N|-a|-fx|-fy|-fw|-fh|-wx|-wy|-ww|-wh]
        (-c|-f|-H|-h|[-l ...|-L...]|-M|-U|-v|-y)'
}

__help()
{
    printf "
$(__usage)

OPTIONS
-------
    OPTION                    ARG
    ------                    ---
    -I,  --input-file=              <FILE> or hyphen (-)
    -C,  --conf-file=               <FILE>
    -T,  --tmp-file=                <FILE>
    -n,  --number-of-rows=          <INT>
    -N,  --number-of-cols=          <INT>
    -a,  --frame-alias=             <FRAMEALIAS>
    -fx, --frame-x=                 <PX>
    -fy, --frame-y=                 <PX>
    -fw, --frame-width=             <PX>
    -fh, --frame-height=            <PX>
    -wx, --workarea-x=              <PX>
    -wy, --workarea-y=              <PX>
    -ww, --workarea-width=          <PX>
    -wh, --workarea-height=         <PX>
    -h,  --help
    -v,  --version

SUBCOMMANDS
-----------
    ACTION                          REQUIRED
    ------                          --------
    -c,  --close                    <REG>
    -H,  --hide                     <REG>
    -U,  --unhide                   <REG>
    -f,  --focus                    <REG>
    -o,  --toggle-focus             <ODIREC>
    -M,  --move-to-desk             <REG> <DESK> -W
    -y,  --cycle                    <REG> <YDIREC> -w -k -j
    -l,  --layout                   <REGN> <WINN> <SPLIT> <LENT> <GRAV>
                                    <GEO>

    ACTION                          ARG
    ------                          ---
    -L,  --layout-abbrev=           <REGN>,<WINN>,<SPLIT>,<LENT>:<GRAV>,
                                    <GEO>

    OPTION                          ARG
    ------                          ---
    -r,  --region=                  ( <REG> | <REGN> )
    -d,  --direction=               ( <ODIREC> | <YDIREC>  )
    -D,  --desk=                    <DESK>
    -e,  --entity=                  <LENT>
    -g,  --geo=                     <GEO>
    -x,  --maximum=                 <WINN>
    -G,  --gravity=                 <GRAV>
    -A,  --action=                  <SPLIT>
    -w,  --window
    -W,  --switch
    -k,  --stack
    -j,  --join

ARGUMENTS
---------
    <FILE>          Regular file or named pipe.
    <INT>           Default is '2'.
    <FRAMEALIAS>    'northwest', 'north', 'northeast', 'east',
                    'southeast', 'south', 'southwest' or 'west'.
    <PX>            Pixel size specified by an integer.
    <REG>           Up to this sample: '1', '1,3', '1-3' or '1,2-3'.
                    Additional: 'active' or 'all'.
    <REGN>          Region number specified by an integer.
    <ODIREC>        'next' or 'preview'.
    <YDIREC>        'clock', 'anticlock' or 'reverse'.
    <DESK>          'curr' or relative to the current desktop 'next' or
                    'preview'. To specify a desktop number (starts at 0)
                    use the prefix 'i:'; a desktop name is prefixed with
                    's:'. Examples: 'i:1'; 's:web'; '\"s:some stuff\"'.
    <LENT>          'alias', 'px' or 'pro'.
    <REF>           'window', 'region' or 'frame'.
    <WINN>          Window number specified by an integer or 'max'.
    <GRAV>          'northwest', 'north', 'northeast', 'west', 'center',
                    'east', 'southwest', 'south', 'southeast' or
                    'static'. Additional: '[0-10]'.
    <SPLIT>         'maximize', 'horizontal', 'vertical',
                    'grid-horizontal', 'grid-vertical',
                    'grid-square-horizontal' or 'grid-square-vertical'.
    <GEO>
                    <X>        Pixel x size specified by an integer.
                    <Y>        Pixel y size specified by an integer.
                    <W>        Pixel width size specified by an integer.
                    <H>        Pixel height size specified by an integer.
                    <PRO>      Procent size specified by an integer.
                    <REGALIAS> 'northwest', 'north', 'northeast','east',
                               'southeast', 'south', 'southwest' or
                               'west'.
                    Samples:
                               '<REGALIAS>',
                               '<PRO>,<PRO>,<PRO>,<PRO>',
                               '<X>,<Y>,<W>,<H>'.
"
}

__calculating()
{
    # Check, if geo of workarea is manually set; if not, we use __NET_WORKAREA instead.
    declare -ga workarea=()
    read -a workarea < <(xprop -root -notype _NET_WORKAREA) &&
            workarea=(${workarea[@]//,}) &&
            workarea=(${workarea[@]:2})
    declare -g workarea_x=${workarea_x:-${workarea[0]}} \
               workarea_y=${workarea_y:-${workarea[1]}} \
               workarea_w=${workarea_width:-${workarea[2]}} \
               workarea_h=${workarea_height:-${workarea[3]}}

    # Check, if frame aliases have been set in a Conf File.
    if declare -f __calculating_frame_alias > /dev/null
    then
        __calculating_frame_alias
    else
        declare -gA frames
    fi

    # We use these aliases for frame geo. We also check, if aliases with same names have been set manually.
    #declare -gA frame
    frames[northwest]=${frames[northwest]:-$workarea_x $workarea_y $((workarea_w/2)) $((workarea_h/2))}
    frames[north]=${frames[north]:-$workarea_x $workarea_y $workarea_w $((workarea_h/2))}
    frames[northeast]=${frames[northeast]:-$((workarea_x+workarea_w/2)) $workarea_y $((workarea_w/2)) $((workarea_h/2))}
    frames[east]=${frames[east]:-$((workarea_x+workarea_w/2)) $workarea_y $((workarea_w/2)) $workarea_h}
    frames[southeast]=${frames[southeast]:-$((workarea_x+workarea_w/2)) $((workarea_y+workarea_h/2)) $((workarea_w/2)) $((workarea_h/2))}
    frames[south]=${frames[south]:-$workarea_x $((workarea_y+workarea_h/2)) $workarea_w $((workarea_h/2))}
    frames[southwest]=${frames[southwest]:-$workarea_x $((workarea_y+workarea_h/2)) $((workarea_w/2)) $((workarea_h/2))}
    frames[west]=${frames[west]:-$workarea_x $workarea_y $((workarea_w/2)) $workarea_h}
    frames[all]=${frames[all]:-$workarea_x $workarea_y $workarea_w $workarea_h}

    if [[ $frame_alias ]]
    then
        declare -a frame_geo=(${frames[$frame_alias]})
        declare -g frame_x=${frame_x:-${frame_geo[0]}} \
                   frame_y=${frame_y:-${frame_geo[1]}} \
                   frame_w=${frame_width:-${frame_geo[2]}} \
                   frame_h=${frame_height:-${frame_geo[3]}}
    else
        declare -g frame_x=${frame_x:-$workarea_x} \
                   frame_y=${frame_y:-$workarea_y} \
                   frame_w=${frame_width:-$workarea_w} \
                   frame_h=${frame_height:-$workarea_h}
    fi

    # To simplify matters, we alias frames geo to x,y,w and h.
    declare -g x=$frame_x \
               y=$frame_y \
               w=$frame_w \
               h=$frame_h

    # Check, if region aliases have been set in a Conf File.
    if declare -f __calculating_region_alias > /dev/null
    then
        __calculating_region_alias
    else
        declare -gA regions
    fi

    # We use these aliases for regions geo. We also check, if aliases with same names have been set manually.
    regions[northwest]=${regions[northwest]:-$x $y $((w/2)) $((h/2))}
    regions[north]=${regions[north]:-$x $y $w $((h/2))}
    regions[northeast]=${regions[northeast]:-$((x+w/2)) $y $((w/2)) $((h/2))}
    regions[east]=${regions[east]:-$((x+w/2)) $y $((w/2)) $h}
    regions[southeast]=${regions[southeast]:-$((x+w/2)) $((y+h/2)) $((w/2)) $((h/2))}
    regions[south]=${regions[south]:-$x $((y+h/2)) $w $((h/2))}
    regions[southwest]=${regions[southwest]:-$x $((y+h/2)) $((w/2)) $((h/2))}
    regions[west]=${regions[west]:-$x $y $((w/2)) $h}
    regions[all]=${regions[all]:-$x $y $w $h}

    # Here we declare row and column number, which are needed to perform grid layouting.
    declare -g row_number=${row_number:-2} \
               col_number=${col_number:-2}

    unset -v \
            workarea_width \
            workarea_height \
            frame_width \
            frame_height
}

__check_args()
{
    declare o
    if [[ ! $OPTARG = -* ]]
    then
        for o
        do
            declare -g "$o"
        done
    else
        { echo "Option -${opt} requires an argument." >&2 ; exit 1 ; }
    fi
}

__build_layout_abbrev()
{
    declare l_l= l_r=
    [[ $1 =~ [[:digit:]]+,([[:digit:]]+|max),.+,(px|pro|alias):.+,.+ ]] &&
    {
        IFS=: read -r l_l l_r <<< "$1"
        set -- ${l_l//,/ }
        layout[${1}:region_number]=$1
        layout[${1}:win_number_maximum]=$2
        layout[${1}:layout_action]=$3
        layout[${1}:entity_region]=$4
        layout[${1}:gravity]=${l_r%%,*}
        layout[${1}:region_geo]=${l_r#*,}

        ((reg_number++))
    }
}

__check_variables_input()
{
    if [[ $1 =~ ^(desk_curr|win_active|win_active_frame_extents|win_active_tags|win_number|desk_select|win_active_geo_x_y|win_active_geo_w_h|win_xid|win_geo_x_y|win_geo_w_h|win_frame_extents|win_tags)=.*$ ]]
    then
        eval "$1"
    else
        { echo "Irregular variable inside input." >&2 ; exit 1 ; }
    fi
}

# -- Main.

(($# == 0)) && { printf '%s\n' "USAGE: $(__usage)" >&2 ; exit 1 ; }

declare \
        arg= \
        args= \
        delim=

for arg
do
    arg=${arg#--}
    case $arg in
        input-file=*)
                args="${args}-I ${arg#*=} "
                ;;
        conf-file=*)
                args="${args}-C ${arg#*=} "
                ;;
        tmp-file=*)
                args="${args}-T ${arg#*=} "
                ;;
        number-of-rows=*)
                args="${args}-n ${arg#*=} "
                ;;
        number-of-cols=*)
                args="${args}-N ${arg#*=} "
                ;;
        frame-alias=*)
                args="${args}-a ${arg#*=} "
                ;;
        frame-width=*)
                args="${args}-1 ${arg#*=} "
                ;;
        -fw)
                args="${args}-1 "
                ;;
        frame-height=*)
                args="${args}-2 ${arg#*=} "
                ;;
        -fh)
                args="${args}-2 "
                ;;
        frame-x=*)
                args="${args}-3 ${arg#*=} "
                ;;
        -fx)
                args="${args}-3 "
                ;;
        frame-y=*)
                args="${args}-4 ${arg#*=} "
                ;;
        -fy)
                args="${args}-4 "
                ;;
        workarea-x=*)
                args="${args}-5 ${arg#*=} "
                ;;
        -wx)
                args="${args}-5 "
                ;;
        workarea-y=*)
                args="${args}-6 ${arg#*=} "
                ;;
        -wy)
                args="${args}-6 "
                ;;
        workarea-width=*)
                args="${args}-7 ${arg#*=} "
                ;;
        -ww)
                args="${args}-7 "
                ;;
        workarea-height=*)
                args="${args}-8 ${arg#*=} "
                ;;
        -wh)
                args="${args}-8 "
                ;;
        cycle)
                args="${args}-y "
                ;;
        region=*)
                args="${args}-r ${arg#*=} "
                ;;
        direction=*)
                args="${args}-d ${arg#*=} "
                ;;
        stack)
                args="${args}-k "
                ;;
        join)
                args="${args}-j "
                ;;
        window)
                args="${args}-w "
                ;;
        toggle-focus=*)
                args="${args}-o ${arg#*=} "
                ;;
        help)
                args="${args}-h "
                ;;
        version)
                args="${args}-v "
                ;;
        layout-abbrev=*)
                args="${args}-L ${arg#*=} "
                ;;
        layout)
                args="${args}-l "
                ;;
        hide)
                args="${args}-H "
                ;;
        unhide)
                args="${args}-U "
                ;;
        close)
                args="${args}-c "
                ;;
        move-to-desk)
                args="${args}-M "
                ;;
        focus)
                args="${args}-f "
                ;;
        desk)
                args="${args}-D ${arg#*=} "
                ;;
        switch)
                args="${args}-W "
                ;;
        entity)
                args="${args}-e ${arg#*=} "
                ;;
        geo)
                args="${args}-g ${arg#*=} "
                ;;
        maximum)
                args="${args}-x ${arg#*=} "
                ;;
        gravity)
                args="${args}-G ${arg#*=} "
                ;;
        action)
                args="${args}-A ${arg#*=} "
                ;;
        "")
                args="${args}-- "
                ;;
       *)
                [[ ${arg:0:1} != - ]] && delim='"'
                args="${args}${delim}${arg}${delim} "
                delim=
                ;;
    esac
done

declare \
        action= \
        col_number= \
        desk_curr= \
        desk_target= \
        direction_cycle= \
        direction_focus= \
        entity_cycle=
        entity_size= \
        file_conf= \
        file_input= \
        file_tmp= \
        frame_alias= \
        frame_height= \
        frame_width= \
        frame_x= \
        frame_y= \
        geo= \
        gravity= \
        hide_action= \
        join= \
        layout_action= \
        region_selection= \
        reg_number=0 \
        row_number= \
        stack= \
        switch_to_desk_target= \
        win_active= \
        win_active_frame_extents= \
        win_active_tags= \
        win_number= \
        win_number_maximum= \
        workarea_height= \
        workarea_width= \
        workarea_x= \
        workarea_y=

declare -a \
        desk_select=() \
        win_active_geo_w_h=() \
        win_active_geo_x_y=() \
        win_frame_extents=() \
        win_geo_w_h=() \
        win_geo_x_y=() \
        win_tags=() \
        win_xid=()

declare -A layout

eval set -- $args
declare opt=

while getopts :I:C:T:n:N:a:1:2:3:4:5:6:7:8:yr:d:kjwo:hvL:lHUcMfD:We:g:x:G:A: opt
do
    case $opt in
        I)
                if [[ ! $OPTARG =~ -.+ ]]
                then
                    XWINREG_INPUT_FILE=$OPTARG
                else
                    { echo "Option -${opt} requires an argument." >&2 ; exit 1 ; }
                fi
                ;;
        C)
                __check_args "XWINREG_CONF_FILE=$OPTARG"
                ;;
        T)
                __check_args "XWINREG_TMP_FILE=$OPTARG"
                ;;
        n)
                __check_args "row_number=$OPTARG"
                ;;
        N)
                __check_args "col_number=$OPTARG"
                ;;
        a)
                __check_args "frame_alias=$OPTARG"
                ;;
        1)
                __check_args "frame_width=$OPTARG"
                ;;
        2)
                __check_args "frame_height=$OPTARG"
                ;;
        3)
                __check_args "frame_x=$OPTARG"
                ;;
        4)
                __check_args "frame_y=$OPTARG"
                ;;
        5)
                __check_args "workarea_x=$OPTARG"
                ;;
        6)
                __check_args "workarea_y=$OPTARG"
                ;;
        7)
                __check_args "workarea_width=$OPTARG"
                ;;
        8)
                __check_args "workarea_height=$OPTARG"
                ;;
        y)
                action=cycle
                ;;
        r)
                __check_args "region_selection=$OPTARG"
                [[ $action == layout ]] && layout[${region_selection}:region_number]=$region_selection
                ;;
        d)
                [[ $action == cycle ]] && __check_args "direction_cycle=$OPTARG"
                ;;
        k)
                stack=stack
                ;;
        j)
                join=join
                ;;
        w)
                [[ $action == cycle ]] && __check_args "entity_cycle=window"
                ;;
        o)
                __check_args "action=focus-toggle" "direction_focus=$OPTARG"
                ;;
        h)
                action=help
                ;;
        v)
                action=version
                ;;
        L)
                __check_args "action=layout-abbrev" && __build_layout_abbrev "$OPTARG"
                ;;
        l)
                action=layout
                ((reg_number++))
                ;;
        H)
                action=hide
                hide_action=add
                ;;
        U)
                action=hide
                hide_action=remove
                ;;
        c)
                action=close
                ;;
        M)
                action=move-to-desk
                ;;
        f)
                action=focus
                ;;
        D)
                __check_args "desk_target=$OPTARG"
                ;;
        W)
                switch_to_desk_target=switch_to_desk_target
                ;;
        e)
                __check_args "entity_size=$OPTARG"
                [[ $action == layout ]] && layout[${region_selection}:entity_region]=$entity_size
                ;;
        g)
                __check_args "geo=$OPTARG"
                [[ $action == layout ]] && layout[${region_selection}:region_geo]=$geo
                ;;
        x)
                __check_args "win_number_maximum=$OPTARG"
                layout[${region_selection}:win_number_maximum]=$win_number_maximum
                ;;
        G)
                __check_args "gravity=$OPTARG"
                layout[${region_selection}:gravity]=$gravity
                ;;
        A)
                __check_args "layout_action=$OPTARG"
                layout[${region_selection}:layout_action]=$layout_action
                ;;
        \?)
                { echo "Unknown option: -${OPTARG}." >&2 ; exit 1 ; }
                ;;
        \:)
                { echo "Option -${OPTARG} requires an argument." >&2 ; exit 1 ; }
                ;;
    esac
done

[[ $XWINREG_CONF_FILE ]] &&
{
    if [[ -f $XWINREG_CONF_FILE ]]
    then
        file_conf=$XWINREG_CONF_FILE
        source "$XWINREG_CONF_FILE"
    else
        { echo "Conf File does not exist or is not a regular file." >&2 ; exit 1 ; }
    fi
}

[[ $XWINREG_INPUT_FILE ]] &&
{
    file_input=$XWINREG_INPUT_FILE

    if [[ $XWINREG_INPUT_FILE == - ]]
    then
        if [[ -p /dev/stdin ]]
        then
            while read -r
            do
                __check_variables_input "$REPLY"
            done
        else
            { echo "Stdin is not coming from a pipe." >&2 ; exit 1 ; }
        fi
    else
        if [[ -p $XWINREG_INPUT_FILE || -f $XWINREG_INPUT_FILE ]]
        then
            while read -r
            do
                __check_variables_input "$REPLY"
            done < "$XWINREG_INPUT_FILE"
        else
            { echo "File does not exist or is neather a regular file nor a named pipe." >&2 ; exit 1 ; }
        fi
    fi
}

if [[ $XWINREG_TMP_FILE ]]
then
    file_tmp=$XWINREG_TMP_FILE
else
    file_tmp=${TMPDIR:-/tmp}/xwinreg_default.tmp
fi

case $action in
    close)
            ${src_dir}/xwinreg-close "$file_tmp" "$region_selection" && ${src_dir}/xwinreg-layout "$file_tmp"
            ;;
    cycle)
            ${src_dir}/xwinreg-cycle "$entity_cycle" "$file_tmp" "$region_selection" "$direction_cycle" "$stack" "$join"
            ${src_dir}/xwinreg-layout "$file_tmp"
            ;;
    focus)
            ${src_dir}/xwinreg-focus "$file_tmp" "$region_selection"
            ;;
    focus-toggle)
            ${src_dir}/xwinreg-focus-toggle "$file_tmp" "$direction_focus"
            ;;
    help)
            __help
            ;;
    hide)
            ${src_dir}/xwinreg-hide "$file_tmp" "$region_selection" "$hide_action"
            ;;
    layout|layout-abbrev)
            ((win_number <= 1)) && { echo "Insufficient windows to work with." >&2 ; exit 1 ; }
            __calculating
            fgrep -v -e "$vars_base" < <(set -o posix ; set) |
            egrep -v -e "^BASH_REMATCH=" \
                     -e "^OPTIND=" \
                     -e "^REPLY=" \
                     -e "^BASH_LINENO=" \
                     -e "^BASH_SOURCE=" \
                     -e "^FUNCNAME=" \
                     -e "^action=" \
                     > "$file_tmp"
            ${src_dir}/xwinreg-layout "$file_tmp"
            ;;
    move-to-desk)
            ${src_dir}/xwinreg-move-to-desk "$file_tmp" "$region_selection" "$desk_target" "$switch_to_desk_target"
            ;;
    version)
            __version
            ;;
    *)
            { echo "No valid action spezified." >&2 ; exit 1 ; }
            ;;
esac

unset -v \
         arg \
         args \
         delim \
         opt \
         action

exit 0
