#!/usr/bin/env bash

# Copyright 2014 D630
# https://github.com/D630/xwinreg

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.

# You should have received a copy of the GNU General
# Public License along with this program. If not, see
# <http://www.gnu.org/licenses/gpl-3.0.html>.

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

#declare vars_base=$(set -o posix ; set)

# -- FUNCTIONS.

__xwr_xwinreg_focus_toggle_version() { echo "0.1.0.2" ; }

__xwr_xwinreg_focus_toggle_usage()
{
    printf '%s\n' 'xwinreg-focus-toggle [-T] (-h|-d|-v)'
}

__xwr_xwinreg_focus_toggle_help()
{
    printf "$(__xwr_xwinreg_focus_toggle_usage)

OPTIONS
-------
    OPT             ARG
    ---             ---
    -h
    -d              <ODIREC>
    -T              <FILE>
    -v

ARGUMENTS
---------
    <FILE>          Regular file or named pipe.
    <ODIREC>        'next' or 'preview'.
"
}

__xwr_xwinreg_focus_toggle_focus_toggle()
{
    declare \
            direction_focus=$2 \
            file_tmp=$1 \
            gravity= \
            h= \
            w= \
            win= \
            win_active= \
            win_number= \
            x= \
            y=

    declare -a \
                win_xid=() \
                xwininfo_win_active=()

    while read -r
    do
        eval "$REPLY"
    done < <(egrep -e "^win_xid=(.*)" \
                   -e "^win_number=.*" "$file_tmp")

    read -r _ _ _ _ win_active < <(xprop -root -notype _NET_ACTIVE_WINDOW)

    case $direction_focus in
        n|next)
                if [[ ${win_xid[win_number-1]} =~ $win_active ]]
                then
                    win=${win_xid[0]}
                else
                    read -r win < <(sed -n "/${win_active}/,+1 p" < <(printf '%s\n' "${win_xid[@]}") | sed -n '$p')
                fi
                ;;
        p|preview)
                if [[ ${win_xid[0]} =~ $win_active ]]
                then
                    win=${win_xid[win_number-1]}
                else
                    read -r win < <(sed -n "/${win_active}/,+1 p" < <(__xwr_xwinreg_focus_toggle_order_reverse_array "${win_xid[@]}") | sed -n '$p')
                fi
                ;;
    esac

    win_active=$win

    # visual bell instead colorize frame border of active window
    mapfile -t xwininfo_win_active < <(xwininfo -id "$win_active")
    x=$((${xwininfo_win_active[3]##* }+${xwininfo_win_active[5]##* }))
    y=$((${xwininfo_win_active[4]##* }+${xwininfo_win_active[6]##* }))
    w=${xwininfo_win_active[7]##* }
    h=${xwininfo_win_active[8]##* }
    gravity=0
    (
        w=$(($w*25/100))
        h=$(($h*25/100))
        __xwr_xwinreg_focus_toggle_do_wmctrl
    )
    __xwr_xwinreg_focus_toggle_do_wmctrl

    wmctrl -i -a "$win"

    #~ unset -v \
             #~ xwininfo_win_active \
             #~ win \
             #~ x \
             #~ y \
             #~ w \
             #~ h
}

__xwr_xwinreg_focus_toggle_do_wmctrl()
{
    wmctrl -i -r "$win" -b "remove,maximized_vert,maximized_horz"
    wmctrl -i -r "$win" -e "${gravity},${x},${y},${w},${h}"
}

__xwr_xwinreg_focus_toggle_order_reverse_array()
{
    declare -a array=($@)
    declare i=
    for ((i=${#array[@]}-1 ; i >= 0 ; --i))
    do
        printf '%s\n' "${array[i]}"
    done
}

__xwr_xwinreg_focus_toggle_check_args()
{
    declare o=
    if [[ ! $OPTARG = -* ]]
    then
        for o
        do
            declare -g "$o"
        done
    else
        { printf '%s\n' "Option -${opt} requires an argument." >&2 ; exit 1 ; }
    fi
}

# -- MAIN.

declare \
        file_tmp= \
        direction_focus= \
        opt=

while getopts :d:hT:v opt
do
    case $opt in
        d)
                __xwr_xwinreg_focus_toggle_check_args "direction_focus=$OPTARG"
                ;;
        h)
                __xwr_xwinreg_focus_toggle_help
                exit 0
                ;;
        T)
                __xwr_xwinreg_focus_toggle_check_args "XWINREG_TMP_FILE=$OPTARG"
                ;;
        v)
                __xwr_xwinreg_focus_toggle_version
                exit 0
                ;;
        \?)
                { printf '%s\n' "Unknown option: -${OPTARG}." >&2 ; exit 1 ; }
                ;;
        \:)
                { printf '%s\n' "Option -${OPTARG} requires an argument." >&2 ; exit 1 ; }
                ;;
    esac
done

if [[ $XWINREG_TMP_FILE ]]
then
    file_tmp=$XWINREG_TMP_FILE
else
    file_tmp=${TMPDIR:-/tmp}/xwinreg_default.tmp
fi

[[ ! $direction_focus ]] && { echo "No direction specified." >&2 ; exit 1 ; }

__xwr_xwinreg_focus_toggle_focus_toggle "$file_tmp" "$direction_focus"

#~ unset -v \
        #~ file_tmp= \
        #~ direction_focus= \
        #~ opt=

exit 0
