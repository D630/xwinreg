#!/usr/bin/env bash

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinreg.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

__focus_toggle()
{
    (($# != 2)) && { echo "__focus_toogle needs tmp file and direction as arguments." >&2 ; exit 1 ; }

    declare \
            direction_focus=$2 \
            file_tmp=$1 \
            gravity= \
            h= \
            src_dir= \
            w= \
            win= \
            win_active= \
            win_number= \
            x= \
            y=

    declare -a \
                win_active_geo_w_h=() \
                win_active_geo_x_y=() \
                win_xid=() \
                xwininfo_win_active=()

    while read -r
    do
        eval "$REPLY"
    done < <(egrep -e "^win_active_geo_w_h=(.*)" -e "^win_active_geo_x_y=(.*)" -e "^win_active=.*" -e "^win_xid=(.*)" -e "^win_number=.*" "$file_tmp")

    case $direction_focus in
        n|next)
                if [[ ${win_xid[win_number-1]} =~ ${win_active:2} ]]
                then
                    win=${win_xid[0]}
                else
                    read -r win < <(sed -n "/${win_active:2}/,+1 p" < <(printf '%s\n' "${win_xid[@]}") | sed -n '$p')
                fi
                ;;
        p|preview)
                if [[ ${win_xid[0]} =~ ${win_active:2} ]]
                then
                    win=${win_xid[win_number-1]}
                else
                    read -r win < <(sed -n "/${win_active:2}/,+1 p" < <(__order_reverse_array "${win_xid[@]}") | sed -n '$p')
                fi
                ;;
    esac

    win_active=$win
    mapfile -t xwininfo_win_active < <(xwininfo -id "$win_active")
    win_active_geo_x_y=($((${xwininfo_win_active[3]##* }+${xwininfo_win_active[5]##* })),$((${xwininfo_win_active[4]##* }+${xwininfo_win_active[6]##* })))
    win_active_geo_w_h=(${xwininfo_win_active[7]##* },${xwininfo_win_active[8]##* })

    # visual bell instead colorize frame border of active window
    x=${win_active_geo_x_y[0]%,*}
    y=${win_active_geo_x_y[0]#*,}
    w=${win_active_geo_w_h[0]%,*}
    h=${win_active_geo_w_h[0]#*,}
    gravity=0
    (
        w=$((${win_active_geo_w_h[0]%,*}*25/100))
        h=$((${win_active_geo_w_h[0]#*,}*25/100))
        __do_wmctrl
    )
    __do_wmctrl

    wmctrl -i -a "$win"

    sed -i -e "s/^win_active_geo_x_y=(.*/win_active_geo_x_y=(${win_active_geo_x_y[*]})/" \
           -e "s/^win_active_geo_w_h=(.*/win_active_geo_w_h=(${win_active_geo_w_h[*]})/" \
           -e "s/^win_active=.*/win_active=$win_active/" "$file_tmp"

    unset -v xwininfo_win_active win
}

__do_wmctrl()
{
    wmctrl -i -r "$win" -b "remove,maximized_vert,maximized_horz"
    wmctrl -i -r "$win" -e "${gravity},${x},${y},${w},${h}"
}

__order_reverse_array()
{
    declare -a array=($@)
    declare i=
    for ((i=${#array[@]}-1 ; i >= 0 ; --i))
    do
        printf '%s\n' "${array[i]}"
    done
}

__focus_toggle "$1" "$2"
